定义函数
def func(arg):
	return arg

调用函数
func(1)

位置参数
def func(arg1, arg2):
	pass
func(1, 2)
func(arg2=1, arg1=2)

关键字参数
不是必须的，且有默认值.
它们经常被用在传递给函数的可选参数中。
当一个函数过多时，方便调用。
def func(arg1，arg2，arg3=None，arg4=None):
	pass
func(1, 2)
func(1, 2, 3)
func(1, 2, 3, 4)
func(1, 2, arg4=3, arg3=4)
在函数调用中，关键字的参数必须跟随在位置参数的后面。
错误的调用：func(arg3=4, 1, 2, arg4=3)
参数都不可以多次赋值。
错误的调用func(1, 2, 3, 4, arg4=5)

任意参数
当你不确定你的函数里将要传递多少参数时你可以用*args。args可成其它变量。
def func(*args)
	return args
func('sven', 18, '178')
用 *-操作符传入列表或元组作为参数
info = ('sven', 18, '178')
func(*info)

任意关键字参数
# 多出的关键字参数将被**kwargs捕捉到，kwargs可以更换，但它是约定。
def func(**kwargs)
	return kw
func(name='sven', age=18, height='178')
用**-操作符让字典传递关键字参数：
info = {name:'sven', age:18, height:'178'}
func(**info)
不要为了写代码的方便随意滥用任意参数，代码通常是被别人读被修改的。so：
易读（名字和参数无需解释）
易改（添加新的关键字参数不会破坏代码的其他部分）

递归函数
一个函数在内部调用自身本身，这个函数就是递归函数。

匿名函数
func = lambda x: x * x
func(2)

闭包
def func(arg):
    def wrapper():
        return arg * arg
    return wrapper

面向切面编程aop与装饰器
装饰器是一个很著名的设计模式，经常被用于有切面需求的场景。
较为经典的有插入日志、性能测试、事务处理等。
有了装饰器，我们就可以抽离出大量函数中与函数功能本身无关的雷同代码并继续重用。
概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。
其实就是一个函数，将共有功能抽离出来，在指定的位置插入。

大神的建议：
    尽量使用隐式上下文和副作用较小的函数与程序。
    函数的隐式上下文由函数内部访问到的所有全局变量与持久层对象组成。
    副作用即函数可能使其隐式上下文发生改变。如果函数保存或删除全局变量或持久层中数据，这种行为称为副作用。
把有隐式上下文和副作用的函数与仅包含逻辑的函数(纯函数)谨慎地区分开来，会带来以下好处：
纯函数的结果是确定的：给定一个输入，输出总是固定相同。
当需要重构或优化时，纯函数更易于更改或替换。
纯函数更容易做单元测试：很少需要复杂的上下文配置和之后的数据清除工作。
纯函数更容易操作、修饰和分发。

内置函数
range
type
isinstance
strip
filter
map
reduce